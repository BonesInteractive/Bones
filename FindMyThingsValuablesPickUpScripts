NOTE: These scripts are EXECUTED IN ORDER for the valuable system pickups to work

The Choice Script

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class ChoiceScript : MonoBehaviour
{
    //public GameObject TextBox;
    public GameObject Choice01;
    public GameObject Choice02;
    public GameObject NoahHoverBox;
    public GameObject MessageBox;
    public GameObject Button;
    public Collider theLotteryTicketCollider;
    public static bool lotteryTicketGlobal = false;
   
    public int ChoiceMade;                                                      //int means integer, a whole number

    public AudioSource clickySound;

    //getting component
    public GameObject ticket;
    public GameObject theValuableScript;

    public void ChoiceOption1()
    {
        //TextBox.GetComponent<Text>().text "That's good stranger, looks like you made the first choice.";
        clickySound.GetComponent<AudioSource>().Play();
        ChoiceMade = 1;

        Option1Selected();
    }

    public void ChoiceOption2()
    {
        ChoiceMade = 2;

        //Make something happen here
    }

    void Update()
    {
        if (ChoiceMade >= 1)
        {
            Choice01.SetActive(false);
            Choice02.SetActive(false);
            NoahHoverBox.SetActive(false);
            MessageBox.SetActive(false);
            Button.SetActive(false);
        }
    }
    public void Option1Selected()
    {
        lotteryTicketGlobal = true;
        theLotteryTicketCollider.enabled = true;
        Debug.Log("lotterTicketActive");

        Valuables.lotteryTicketQuest = true;
        //Valuables.instance.EndMethod();
        ticket.GetComponent<Valuables>().EndMethod();

    }
}

_______________________________

Valuables Script

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Valuables : MonoBehaviour
{
    //NOTE: this is a singleton script

    //Lottery Ticket variables
    public GameObject theLotteryTicket;
    public Collider theLotteryTicketCollider;
    public GameObject lotteryTicketSparkleEnabled;                            //enables sparkle effect when finding an item
    public static bool lotteryTicketQuest = false;                            //this calls the ticketquest bool to be false

    void Start()
    {
        lotteryTicketSparkleEnabled.GetComponent<ParticleSystem>().Stop();
       
    }

    public void EndMethod()
    {

        if (lotteryTicketQuest)
        {
            theLotteryTicketCollider.enabled = true;                            //the collider is on for lottery ticket
            theLotteryTicket.SetActive(true);                                   //the game object is turned on
            Debug.Log("lottery ticket gameobject and collider active");

            basement_flashlightAllPickUps.lotteryTicketavailable = true;
            Debug.Log("going to flashlight script, lottery ticket bool set to true");
        }
    }
}


______________________________

Basement Flashlight Script is required because new stuff is in Update function

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class basement_flashlightAllPickUps : MonoBehaviour
{
    //public GameObject[] collectables;
    //public Collider[] allEnable;

    //public GameObject batteryWeCollectCollider;
    private ArrayOfBools callScript;
    //public GameObject batteryWeCollectCollider2;

    //public GameObject sparkleEnable;                                            //enables sparkle effect when finding an item
   //public GameObject sparkleEnable2;

    public GameObject myPlayer;
    public GameObject HeadLampToggle;

    //Items that will be picked up
    //[SerializeField]
    //public Collider batteryColliderEnable;                                      //used to enable collider when flashlight raycast hits the item
    //public Collider batteryColliderEnable2;

    public static bool batteryAlreadyCollected = false;
   
    bool soundPlayed = false;
    bool soundPlayed2 = false;

    public RawImage currentBatteryBar;

    public Light flashlightSource2;                                             //reference to our light
    public Light flashlightOff;                                                 //reference our backlit when looking at the light on flashlight

    static public float currentbatteryPower = 100;                                      //defines our current battery power
    public int maximumBatteryPower = 100;                                       //defines our max battery power

    static public float _lowDrainBatterySpeed = 2;                                  //defines our low power battery speed
    static public float _highDrainBatterySpeed = 5.0f;                                 //defines our high power battery speed

    public AudioClip soundTurnOn;                                               //assign audio clip
    public AudioClip soundTurnOff;                                              //assign audio clip
    public AudioClip batteryPickUpSound;                                        //assign audio clip
    public AudioClip foundItem;

    public float _maxFlickerSpeed = 1f;                                         //defines are max light flicker speed
    public float _minFlickerSpeed = 0.1f;                                       //defines are min light flicker speed

    //ValuablesInBasement
    public List<string> LotteryTicket = new List<string>();
    public GameObject theArrayofBoolsGO;
    public GameObject theLotteryTicket;
    public GameObject lotteryTicketSparkleEnabled;
    public Collider theLotteryTicketCollider;
    public BoxCollider separateBoxCollider;
    public static bool lotteryTicketavailable;
    public static basement_flashlightAllPickUps callBasementFlashlightToggleScript;


    bool soundPlayed3 = false;

    void Start()
    {
        UpdateBatteryBar();

        flashlightSource2.enabled = false;
        flashlightOff.enabled = false;

        //Valuables
        lotteryTicketSparkleEnabled.GetComponent<ParticleSystem>().Stop();
        lotteryTicketavailable = false;
        separateBoxCollider.enabled = false;
    }

    private void UpdateBatteryBar()
    {
        float ratio = currentbatteryPower / maximumBatteryPower;
        currentBatteryBar.rectTransform.localScale = new Vector3(ratio, 1f, 1f);
    }

    void Update()
    {
        UpdateBatteryBar();

        if (Input.GetKeyDown("f") || Input.GetKeyDown("joystick button 0"))
        {
            HeadLampToggle.GetComponent<Animator>().Play("HeadLampTouch");
            GetComponent<AudioSource>().PlayOneShot(soundTurnOn, .6f);
            flashlightSource2.enabled = !flashlightSource2.enabled;
            flashlightOff.enabled = !flashlightOff.enabled;
        }

        if (currentbatteryPower > maximumBatteryPower)                          //if current battery power is greater than max power
        {
            currentbatteryPower = maximumBatteryPower;                          //then make current power to max power
        }
        if (currentbatteryPower < 0)                                            //if cur power is less than zero
        {
            currentbatteryPower = 0;                                            //then make current power equal to zero
            flashlightSource2.enabled = false;                                  //you guessed it, main light source turns off
            flashlightOff.enabled = false;                                      //back light turns off
        }


        if (currentbatteryPower < 10)                                           //if current battery power is less than 10
        {
            StartCoroutine("FlashlightModifier");                               //then will start flashlight modifier function to flickering
        }

        if (currentbatteryPower > 10)                                           //if current battery power is greater than 10
        {
            StopCoroutine("FlashlightModifier");                                //then will stop flashlight modifier function to flickering
        }

        if (currentbatteryPower == 0)
        {
            StopCoroutine("FlashlightModifier");                                ////then will stop flashlight modifier function
            flashlightSource2.enabled = false;                                  //and disables the flashlight
            flashlightOff.enabled = false;                                      //and disables the back light
            return;                                                             //return because 
        }


        if (flashlightSource2.enabled)                                                                      //if the flashlight is enabled
        {
            currentbatteryPower -= _lowDrainBatterySpeed * Time.deltaTime;                                  //then minus our low drain speed from our current power

            //Note: It seems its raycasting the player position which is causing it to only look at the player.

            Vector3 origin = myPlayer.transform.position;
            Vector3 direction = myPlayer.transform.forward;

            Ray interactionRay = new Ray (origin, direction);
            RaycastHit hit;
            float RayLength = 1000;                                                                         //raycast draw line length to find pick ups

            Vector3 interactionRayEndpoint = direction * RayLength;                                         //will give you the position

            bool hitFound = Physics.Raycast(interactionRay, out hit, RayLength);                            //add units after ray length
            Debug.DrawLine(origin, interactionRayEndpoint, Color.red, 5);                                   //this will show the debug drawline on ray length


            if (hitFound) //&& Input.GetKeyDown("joystick button 1") || Input.GetKeyDown("space")) //NOTE: THis is not working
            {
                if (!soundPlayed && hit.collider.gameObject.tag == "batteryTAG")
                {
                    GetComponent<AudioSource>().PlayOneShot(foundItem, 1);
                    soundPlayed = true;

                    batteryAlreadyCollected = true;

                    ArrayOfBools.batteryPickup1 = true;
                    theArrayofBoolsGO.GetComponent<ArrayOfBools>().SomeMethod();

                    GameObject hitGameObject = hit.transform.gameObject;
                }
            }

            else
            {

                if (soundPlayed) soundPlayed = false;

            }

            if (hitFound)
            {
                if (!soundPlayed2 && hit.collider.gameObject.tag == "batteryTAG2")
                {

                    GetComponent<AudioSource>().PlayOneShot(foundItem, 1);
                    soundPlayed2 = true;

                    ArrayOfBools.batteryPickup2 = true;
                    theArrayofBoolsGO.GetComponent<ArrayOfBools>().SomeMethod();

                    GameObject hitGameObject = hit.transform.gameObject;
                }
            }
            else
            {

                if (soundPlayed2) soundPlayed2 = false;
            }

            if (hitFound)                                                                                                 //hitFound bool is true
            {

                if (lotteryTicketavailable = true && hit.collider.gameObject.tag == "LotteryTicket")     //lotteryTicketavailable = true and interactionhit tag LotteryTicket     
                {
                    Debug.Log("hit lottery ticket collider, shiny should pop up");

                  
                    GetComponent<AudioSource>().PlayOneShot(foundItem, 1);
                    soundPlayed3 = true;

                    theLotteryTicket.SetActive(true);
                    lotteryTicketSparkleEnabled.GetComponent<ParticleSystem>().Play();
                    Debug.Log("sparkle particle is back on, shit yes!");
                    theLotteryTicketCollider.enabled = true;


                    //this is the important part, once you raycast the collider the collider on pickup turns on and the hit collider turns off
                    separateBoxCollider.enabled = true;                                                 //this turns on the lottery ticket to grab or walk over
                    theLotteryTicketCollider.enabled = false;                                           //remove the hit collider to reveal the pickup collider

                }
            }

            else
            {

                if (soundPlayed3) soundPlayed3 = false;
            }
        }
    }


    IEnumerator FlashlightModifier()
    {
        flashlightSource2.enabled = true;                                       //enable flashlight
        flashlightOff.enabled = true;                                           //enable flashlight
        yield return new WaitForSeconds                                         //between
            (Random.Range(_minFlickerSpeed, _maxFlickerSpeed));                 //the min flicker speed and max

        flashlightSource2.enabled = false;                                      //disable flashlight
        flashlightOff.enabled = false;                                          //disable flashlight
        yield return new WaitForSeconds                                         //between
            (Random.Range(_minFlickerSpeed, _maxFlickerSpeed));                 //the min flicker speed and max
    }


    public void AddBattery(int _batteryPowerAmount)
    {
        currentbatteryPower += _batteryPowerAmount;                             //add battery power amount to our current battery power

        if(batteryPickUpSound != null)                                          //if we have a battery pick up assigned
        {
            GetComponent<AudioSource>().PlayOneShot(batteryPickUpSound, 1);

            //GetComponent<AudioSource>().clip = batteryPickUpSound;            //then audio clip equals batteryPickUpSound
            //GetComponent<AudioSource>().Play();                               //and play sound
        }
     
    }

}



_________________________________

Valuables Pick Up Script
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ValuablePickUp : MonoBehaviour
{

    private bool triggered;

    public GameObject pickUpValuable;
    public GameObject imageofValuable;

    public AudioSource valuableSound;

    void Awake()
    {
        pickUpValuable.gameObject.SetActive(false);
        imageofValuable.gameObject.SetActive(false);
    }


    private void OnTriggerEnter(Collider other)
    {
        if(other.tag == "PlayerOpponent")                                  //if the gameobject with the tag Player enters the collider
        {
            valuableSound.GetComponent<AudioSource>().Play();
            //put an image here if you like to see what item you picked up, graphics go here

            pickUpValuable.gameObject.SetActive(true);                                              //shows text prompt
            imageofValuable.gameObject.SetActive(true);
            Debug.Log("pickedup ticket, image showing");

            StartCoroutine(TriggerLabel());
        }
    }

    IEnumerator TriggerLabel()
    {
        triggered = true;

        yield return new WaitForSeconds(1.9f);                                                      //wait 1.9 seconds for prompt and/or graphics to close
        pickUpValuable.gameObject.SetActive(false);                                                 //closes text prompt
        imageofValuable.gameObject.SetActive(false);

        ArrayOfBools.lotteryTicketPickedUp = true;
        ArrayOfBools.callArrayOfBoolsScript.CollectedLotteryTicket();

        Debug.Log("arrayofbools script called and now destroying gameobject");
        //Destroy(gameObject);                                                                        //Destroy the lottery ticket game object
        yield return null;


    }

    void OnGUI()
    {
        if (triggered)                                                                              //if bool is true then below follows
        {
            GUI.Label(new Rect(10, 10, 5, 20), "You Found The Lottery Ticket!");                    //calls a UI label and text shown
            Debug.Log("GUI label turned on");
        }
    }

}

____________________________



Array Of Bool Scripts (This is where we destroy game objects)


using System.Collections;
using System.Collections.Generic;
using UnityEngine;

//NOTE: This is a singleton

public class ArrayOfBools : MonoBehaviour
{
    public static ArrayOfBools callArrayOfBoolsScript;   //this is what is called from another script, in your case the flashlight toggle script
    //public AudioClip silenceSound;

    public static bool batteryPickup1;
    public static bool batteryPickup2;

    //Valuables
    public GameObject lotteryTicketArray;
    public GameObject theDestroyedLotteryTicket;
    public static bool lotteryTicketPickedUp;

    public static bool drainwaterOff;

    internal bool mybool;

    void Start()
    {
        callArrayOfBoolsScript = this;
        //instance = this;
        //someMethod();
        //drainwaterIsOff();
        //Debug.Log("Started someMethod");
    }

    public void SomeMethod()
    {
        if (batteryPickup1)
        {
            batteryPickup1 = true;
            Destroy(this.gameObject);
            Debug.Log("destroyed battery pickup 1");
        }
        if (batteryPickup2)
        {
            batteryPickup2 = true;
            Destroy(this.gameObject);
            Debug.Log("destroyed battery pickup 2");
        }
    }


    public void CollectedLotteryTicket()     //called from flashlight toggle script, once its picked up the game object is destroyed.
    {
        if (lotteryTicketPickedUp)
        {
            if (lotteryTicketArray != null)
            {
                lotteryTicketPickedUp = true;
                Destroy(theDestroyedLotteryTicket.gameObject);
                Debug.Log("destroyed lottery ticket pickup");
            }
        }
    }
        
    public void drainwaterIsOff()
    {
        if (drainwaterOff)
        {
            drainwaterOff = true;
            Destroy(this.gameObject);
            Debug.Log("destroyed drain water");
        }
    }
}


