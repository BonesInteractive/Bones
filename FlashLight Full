using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class flashlightToggle : MonoBehaviour
{
    //public GameObject[] collectables;
    //public Collider[] allEnable;

    public LayerMask _valuableLayer;

    public List<string> StrayPickUps = new List<string>();
    public GameObject batteryWeCollectCollider;
    private ArrayOfBools callScript;
    public GameObject batteryWeCollectCollider2;
    public GameObject sparkleEnable;                                            //enables sparkle effect when finding an item
    public GameObject sparkleEnable2;

    public GameObject myPlayer;
    public GameObject HeadLampToggle;
    Camera cam;

    //Items that will be picked up
    //[SerializeField]
    public Collider batteryColliderEnable;                                      //used to enable collider when flashlight raycast hits the item
    public Collider batteryColliderEnable2;

    public static bool batteryAlreadyCollected = false;
   
    bool soundPlayed = false;
    bool soundPlayed2 = false;

    float nativeHorizontalResolution = 1920.0f;                                 //for the GUI label resolution
    float nativeVerticalResolution = 1080.0f;                                   //for the GUI label resolution

    public Light flashlightSource2;                                             //reference to our light
    public Light flashlightOff;                                                 //reference our backlit when looking at the light on flashlight

    public RawImage currentBatteryBar;

    public float currentbatteryPower = 0f;                                      //defines our current battery power
    public int maximumBatteryPower = 100;                                       //defines our max battery power

    public float _lowDrainBatterySpeed = .8f;                                  //Change For Adjustments. Change in Inspector! Defines our low power battery speed
    public float _highDrainBatterySpeed = 5.0f;                                 //defines our high power battery speed

    public AudioClip soundTurnOn;                                               //assign audio clip
    public AudioClip soundTurnOff;                                              //assign audio clip
    public AudioClip batteryPickUpSound;                                        //assign audio clip
    public AudioClip foundItem;

    public float _maxFlickerSpeed = 1f;                                         //defines are max light flicker speed
    public float _minFlickerSpeed = 0.1f;                                       //defines are min light flicker speed


    //Valuables Only
    public List<string> LotteryTicket = new List<string>();

    public GameObject theLotteryTicket;
    public GameObject lotteryTicketSparkleEnabled;
    public Collider theLotteryTicketCollider;
    public BoxCollider separateBoxCollider;
    public static bool lotteryTicketavailable = false;
    public static bool sinked = false;

    bool soundPlayed3 = false;
    public static bool LotteryTicketOnce = false;

    public GameObject theArrayofBoolsGO;

    void Start()
    {

        UpdateBatteryBar();

        batteryColliderEnable.enabled = false;
        batteryColliderEnable2.enabled = false;
        //allEnable = GetComponent<Collider>();

        sparkleEnable.GetComponent<ParticleSystem>().Stop();
        sparkleEnable2.GetComponent<ParticleSystem>().Stop();

        flashlightSource2.enabled = false;
        flashlightOff.enabled = false;
        //Debug.Log("Flashlight should be off");

        //singleton.GetComponent<GlobalBattery>();
        //GetComponent<GlobalBattery>();

        //Valuables Only
        //lotteryTicketSparkleEnabled.GetComponent<ParticleSystem>().Stop();
        //theLotteryTicketCollider.enabled = false;

    }

    private void UpdateBatteryBar()
    {
        float ratio = currentbatteryPower / maximumBatteryPower;
        currentBatteryBar.rectTransform.localScale = new Vector3(ratio, 1f, 1f);
    }


    void Update()
    {
            UpdateBatteryBar();                                                  //Updating battery bar



                if (Input.GetKeyDown("f") || Input.GetKeyDown("joystick button 0"))
        {
            HeadLampToggle.GetComponent<Animator>().Play("HeadLampTouch");
            GetComponent<AudioSource>().PlayOneShot(soundTurnOn, .6f);
            flashlightSource2.enabled = !flashlightSource2.enabled;
            flashlightOff.enabled = !flashlightOff.enabled;
        }

        if (currentbatteryPower > maximumBatteryPower)                          //if current battery power is greater than max power
        {
            currentbatteryPower = maximumBatteryPower;                          //then make current power to max power
        }
        if (currentbatteryPower < 0)                                            //if cur power is less than zero
        {
            currentbatteryPower = 0;                                            //then make current power equal to zero
            flashlightSource2.enabled = false;                                  //you guessed it, main light source turns off
            flashlightOff.enabled = false;                                      //back light turns off
        }


        if (currentbatteryPower < 10)                                           //if current battery power is less than 10
        {
            StartCoroutine("FlashlightModifier");                               //then will start flashlight modifier function to flickering
        }

        if (currentbatteryPower > 10)                                           //if current battery power is greater than 10
        {
            StopCoroutine("FlashlightModifier");                                //then will stop flashlight modifier function to flickering
        }

        if (currentbatteryPower == 0)
        {
            StopCoroutine("FlashlightModifier");                                ////then will stop flashlight modifier function
            flashlightSource2.enabled = false;                                  //and disables the flashlight
            flashlightOff.enabled = false;                                      //and disables the back light
            return;                                                             //return because 
        }


        if (flashlightSource2.enabled)                                          //if the flashlight is enabled
        {
            currentbatteryPower -= _lowDrainBatterySpeed * Time.deltaTime;      //then minus our low drain speed from our current power

            Vector3 playerPosition = transform.position;
            Vector3 forwardDirection = transform.forward;

            Ray interactionRay = new Ray(playerPosition, forwardDirection);
            RaycastHit interactionRayHit;
            float interactionRayLength = 3.0f;                                                  //raycast draw line length to find pick ups

            Vector3 interactionRayEndpoint = forwardDirection * interactionRayLength;           //will give you the position
            Debug.DrawLine(playerPosition, interactionRayEndpoint, Color.red, 5);                            //this will show the debug drawline on ray length

            bool hitFound = Physics.Raycast(interactionRay, out interactionRayHit, interactionRayLength); //  1 << 20 | 1 << 17 Can also use _valuableLayer.value.  20th layer is ray cast blocker, 17th layer is Valuables.

            //bool hitFoundValuable = Physics.Raycast(interactionRay, out interactionRayHit, interactionRayLength, 1 << 17);

            bool hitFoundBlocker = Physics.Raycast(interactionRay, out interactionRayHit, interactionRayLength, 1 << 20);//~(1 << 17
            //Debug.Log("raycasting raycast blocker layer");

            if (hitFound)
            {
                if (!soundPlayed && interactionRayHit.collider.gameObject.tag == "batteryTAG")
                {
                    GetComponent<AudioSource>().PlayOneShot(foundItem, 1);
                    soundPlayed = true;
                    sparkleEnable.GetComponent<ParticleSystem>().Play();
                    batteryWeCollectCollider.SetActive(true);

                    batteryAlreadyCollected = true;

                    batteryColliderEnable.enabled = true;

                    ArrayOfBools.batteryPickup1 = true;
                    //ArrayOfBools.instance.SomeMethod();
                    theArrayofBoolsGO.GetComponent<ArrayOfBools>().SomeMethod();

                    GameObject hitGameObject = interactionRayHit.transform.gameObject;            

                }
            }

            else
            {           

                batteryWeCollectCollider.SetActive(false);

                if (soundPlayed) soundPlayed = false;

            }
    

            if (hitFound)
            {
                if (!soundPlayed2 && interactionRayHit.collider.gameObject.tag == "batteryTAG2")
                {

                    GetComponent<AudioSource>().PlayOneShot(foundItem, 1);
                    soundPlayed2 = true;

                    sparkleEnable2.GetComponent<ParticleSystem>().Play();
                   
                    batteryWeCollectCollider2.SetActive(true);

                    batteryColliderEnable2.enabled = true;

                    ArrayOfBools.batteryPickup2 = true;
                    //ArrayOfBools.instance.SomeMethod();
                    theArrayofBoolsGO.GetComponent<ArrayOfBools>().SomeMethod();

                    GameObject hitGameObject = interactionRayHit.transform.gameObject;

                }
            }
            else
            {        

                batteryWeCollectCollider2.SetActive(false);

                if (soundPlayed2) soundPlayed2 = false;
            }


            if (hitFound && lotteryTicketavailable) //checks bool only once or should
            {
                if (!soundPlayed3 && interactionRayHit.collider.gameObject.tag == "LotteryTicketTAG")
                    Debug.Log("Raycast hit lottery ticket collider");
                {
                    lotteryTicketavailable = true;
                    GetComponent<AudioSource>().PlayOneShot(foundItem, 1);
                    theLotteryTicket.SetActive(true);
                    lotteryTicketSparkleEnabled.GetComponent<ParticleSystem>().Play();
                    theLotteryTicketCollider.enabled = true;

                    ArrayOfBools.lotteryTicketPickedUp = true;

                    lotteryTicketavailable = false;
                            
                    //theArrayofBoolsGO.GetComponent<ArrayOfBools>().CollectedLotteryTicket();

                    Debug.Log("lottery ticket collider active and ready to be picked up");
                }
            }


            else
            {
                //theLotteryTicket.SetActive(false);

                if (soundPlayed3) soundPlayed3 = false;
            }

            if (hitFoundBlocker)
            {
                if(interactionRayHit.collider.gameObject.tag == "HideValuables")
                {
                    _valuableLayer = ~(1 << 17);
                    Debug.Log("hiding valuables");
                }
            }

            else
            {
                _valuableLayer = (1 << 17);
            }
        }
    }


    IEnumerator FlashlightModifier()
    {
        flashlightSource2.enabled = true;                                       //enable flashlight
        flashlightOff.enabled = true;                                           //enable flashlight
        yield return new WaitForSeconds                                         //between
            (Random.Range(_minFlickerSpeed, _maxFlickerSpeed));                 //the min flicker speed and max

        flashlightSource2.enabled = false;                                      //disable flashlight
        flashlightOff.enabled = false;                                          //disable flashlight
        yield return new WaitForSeconds                                         //between
            (Random.Range(_minFlickerSpeed, _maxFlickerSpeed));                 //the min flicker speed and max
    }


    public void AddBattery(int _batteryPowerAmount)
    {
        currentbatteryPower += _batteryPowerAmount;                             //add battery power amount to our current battery power

        if(batteryPickUpSound != null)                                          //if we have a battery pick up assigned
        {
            GetComponent<AudioSource>().PlayOneShot(batteryPickUpSound, 1);

            //GetComponent<AudioSource>().clip = batteryPickUpSound;            //then audio clip equals batteryPickUpSound
            //GetComponent<AudioSource>().Play();                               //and play sound
        }
    }
}
        


        

