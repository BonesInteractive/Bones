
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class flashlightToggle : MonoBehaviour
{
    public Light flashlightSource2;      //reference to our light
    public Light flashlightOff;          //reference our backlit when looking at the light on flashlight

    public float currentbatteryPower = 0f;     //defines our current battery power
    public int maximumBatteryPower = 100;     //defines our max battery power

    public float _lowDrainBatterySpeed = 2.5f;    //defines our low power battery speed
    public float _highDrainBatterySpeed = 5.0f;    //defines our high power battery speed

    public AudioClip soundTurnOn;         //assign audio clip
    public AudioClip soundTurnOff;        //assign audio clip
    public AudioClip batteryPickUpSound;  //assign audio clip

    public float _batteryBarLength;       //defines battery bar length

    public float _maxFlickerSpeed = 1f;         //defines are max light flicker speed
    public float _minFlickerSpeed = 0.1f;       //defines are min light flicker speed

    void Start()
    {
        currentbatteryPower = maximumBatteryPower;    //current battery power equals max on start up

        flashlightSource2.enabled = false;
        flashlightOff.enabled = false;

    }

    void Update()
    {

        _batteryBarLength = (Screen.width / 4) * (currentbatteryPower / (float) maximumBatteryPower);      //battery bar length is equal to quarter of screen width * our current power divided by max

        if (Input.GetKeyDown("z") || Input.GetKeyDown("joystick button 0"))
        {
            GetComponent<AudioSource>().PlayOneShot(soundTurnOn, .6f);
            flashlightSource2.enabled = !flashlightSource2.enabled;
            flashlightOff.enabled = !flashlightOff.enabled;
        }

        if(currentbatteryPower > maximumBatteryPower)       //if current battery power is greater than max power
        {
            currentbatteryPower = maximumBatteryPower;      //then make current power to max power
        }
        if(currentbatteryPower < 0)                         //if cur power is less than zero
        {
            currentbatteryPower = 0;                        //then make current power equal to zero
            flashlightSource2.enabled = false;              //you guessed it, main light source turns off
            flashlightOff.enabled = false;                  //back light turns off
        }


        if(currentbatteryPower < 10)                        //if current battery power is less than 10
        {
            StartCoroutine("FlashlightModifier");           //then will start flashlight modifier function to flickering
        }

        if (currentbatteryPower > 10)                       //if current battery power is greater than 10
        {
            StopCoroutine("FlashlightModifier");            //then will stop flashlight modifier function to flickering
        }

        if(currentbatteryPower == 0)
        {
            StopCoroutine("FlashlightModifier");            ////then will stop flashlight modifier function
            flashlightSource2.enabled = false;              //and disables the flashlight
            flashlightOff.enabled = false;                  //and disables the back light
            return;                                         //return because 
        }


        if (flashlightSource2.enabled)                                        //if the flashlight is enabled
        {
            currentbatteryPower -= _lowDrainBatterySpeed * Time.deltaTime;    //then minus our low drain speed from our current power
        }
    }


    IEnumerator FlashlightModifier()
    {
        flashlightSource2.enabled = true;                                    //enable flashlight
        flashlightOff.enabled = true;                                        //enable flashlight
        yield return new WaitForSeconds                                      //between
            (Random.Range(_minFlickerSpeed, _maxFlickerSpeed));              //the min flicker speed and max

        flashlightSource2.enabled = false;                                    //disable flashlight
        flashlightOff.enabled = false;                                       //disable flashlight
        yield return new WaitForSeconds                                      //between
            (Random.Range(_minFlickerSpeed, _maxFlickerSpeed));              //the min flicker speed and max
    }


    public void AddBattery(int _batteryPowerAmount)
    {
        currentbatteryPower += _batteryPowerAmount;                            //add battery power amount to our current battery power

        if(batteryPickUpSound != null)                                         //if we have a batter pick up assigned
        {
            GetComponent<AudioSource>().clip = batteryPickUpSound;             //then audio clip equals batteryPickUpSound
            GetComponent<AudioSource>().Play();                                //and play sound
        }
    }


    void OnGUI()
    {
        GUI.Box(new Rect(5, 35, _batteryBarLength, 20), "Battery");  //Displays our current battery power as a bar
    }

}
        


        


        

