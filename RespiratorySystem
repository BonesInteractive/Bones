using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class RespiratorSystem : MonoBehaviour
{
    public GameObject theRespirator;

    public Collider chemicalHazard;                                             //to turn off hazard

    public GameObject respiratoryScript;
    public string stopRespiratorySystemScript;

    public GameObject CartridgeBG;
    public GameObject CartridgeText;

    public RawImage currentCartridgeBar;

    static public float currentCartridgePower = 100;                            //defines our current cartridge life, this also allows the bar to stay where its at upon scene changes
    public int maximumCartridgePower = 100;                                     //defines our max cartridge life, this also allows the bar to stay where its at upon scene changes

    static public float _lowDrainCartridgeSpeed = 5;                            //This is main drain speed for cartridge bar
    static public float _highDrainCartridgeSpeed = 5.0f;                        //defines our high power speed

    public AudioSource soundEquipOn;
    public AudioSource soundTurnOff;

    public float Counter = 0;

    void Start()
    {
        UpdateCartridgeBar();

        theRespirator.SetActive(false);
    }

    private void UpdateCartridgeBar()
    {
        float ratio = currentCartridgePower / maximumCartridgePower;
        currentCartridgeBar.rectTransform.localScale = new Vector3(ratio, 1f, 1f);
    }

    void Update()
    {
        UpdateCartridgeBar();

        if (Input.GetKeyDown("r") || Input.GetKeyDown("joystick button 0"))
        {
            //the code lines below allow to play different audio sounds on same key press using R. it counts on a counter.
            if (Counter == 0)
            {
                soundEquipOn.Play();
                Debug.Log("Play 1");
                theRespirator.gameObject.SetActive(!theRespirator.gameObject.activeSelf);
                chemicalHazard.enabled = !chemicalHazard.enabled;
                print("Num 1");
            }
            if (Counter == 1)
            {
                soundEquipOn.Stop();
                Debug.Log("Play 2");
                theRespirator.gameObject.SetActive(!theRespirator.gameObject.activeSelf);
                print("Num 2");
                soundTurnOff.Play();
                Debug.Log("Play 3");
            }
            if (Counter == 2)
            {
                soundTurnOff.Stop();
                //soundEquipOn.Play();
                Debug.Log("Play 4");
                theRespirator.gameObject.SetActive(!theRespirator.gameObject.activeSelf);
                print("Num 3");
                //audio3.Play();

                //GetComponent<AudioSource>().PlayOneShot(soundEquipOn, .6f);

                //theRespirator.gameObject.SetActive(!theRespirator.gameObject.activeSelf);

                //chemicalHazard.enabled = !chemicalHazard.enabled;

            }
            Counter++;
        }

        if (Counter == 2)
        {
            Counter = 0;
        }

        if (currentCartridgePower > maximumCartridgePower)                          //if current battery power is greater than max power
        {
            currentCartridgePower = maximumCartridgePower;                          //then make current power to max power
        }
        if (currentCartridgePower < 0)                                            //if cur power is less than zero
        {
            currentCartridgePower = 0;                                            //then make current power equal to zero

            theRespirator.SetActive(false);
            chemicalHazard.enabled = true;
            //GetComponent<AudioSource>().PlayOneShot(soundTurnOff, .6f);

            (respiratoryScript.GetComponent(stopRespiratorySystemScript) as MonoBehaviour).enabled = false;

        }

        if (theRespirator.gameObject.activeSelf)                                          //when the respirator is on
        {
            currentCartridgePower -= _lowDrainCartridgeSpeed * Time.deltaTime;              //then the cartridge life drains
        }

        //going to need a healing portion here when you need replace the cartridges
    }

    private void HealDamage(float heal)                                         // this calls a script and grabs the HealDamage Message to heal.  Make sure public boolean in inspector is unchecked
    {
        currentCartridgePower += heal;
        if (currentCartridgePower > maximumCartridgePower)
            currentCartridgePower = maximumCartridgePower;

        UpdateCartridgeBar();

    }

    public void turnOffMask()
    {
        if (!theRespirator.gameObject.activeSelf)
        {
            //GetComponent<AudioSource>().PlayOneShot(soundTurnOff, .6f);
        }
    }
}

